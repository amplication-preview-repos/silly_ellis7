/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Router as PrismaRouter } from "@prisma/client";

export class RouterServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.RouterCountArgs, "select">): Promise<number> {
    return this.prisma.router.count(args);
  }

  async routers(args: Prisma.RouterFindManyArgs): Promise<PrismaRouter[]> {
    return this.prisma.router.findMany(args);
  }
  async router(
    args: Prisma.RouterFindUniqueArgs
  ): Promise<PrismaRouter | null> {
    return this.prisma.router.findUnique(args);
  }
  async createRouter(args: Prisma.RouterCreateArgs): Promise<PrismaRouter> {
    return this.prisma.router.create(args);
  }
  async updateRouter(args: Prisma.RouterUpdateArgs): Promise<PrismaRouter> {
    return this.prisma.router.update(args);
  }
  async deleteRouter(args: Prisma.RouterDeleteArgs): Promise<PrismaRouter> {
    return this.prisma.router.delete(args);
  }
  async GetRouters(args: string): Promise<string[]> {
    throw new Error("Not implemented");
  }
  async ScanRouters(args: string): Promise<string> {
    throw new Error("Not implemented");
  }
}
