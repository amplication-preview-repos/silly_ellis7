/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { RouterService } from "../router.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { RouterCreateInput } from "./RouterCreateInput";
import { Router } from "./Router";
import { RouterFindManyArgs } from "./RouterFindManyArgs";
import { RouterWhereUniqueInput } from "./RouterWhereUniqueInput";
import { RouterUpdateInput } from "./RouterUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class RouterControllerBase {
  constructor(
    protected readonly service: RouterService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Router })
  @nestAccessControl.UseRoles({
    resource: "Router",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createRouter(@common.Body() data: RouterCreateInput): Promise<Router> {
    return await this.service.createRouter({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        isConnected: true,
        routerName: true,
        macAddress: true,
        signalStrength: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Router] })
  @ApiNestedQuery(RouterFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Router",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async routers(@common.Req() request: Request): Promise<Router[]> {
    const args = plainToClass(RouterFindManyArgs, request.query);
    return this.service.routers({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        isConnected: true,
        routerName: true,
        macAddress: true,
        signalStrength: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Router })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Router",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async router(
    @common.Param() params: RouterWhereUniqueInput
  ): Promise<Router | null> {
    const result = await this.service.router({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        isConnected: true,
        routerName: true,
        macAddress: true,
        signalStrength: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Router })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Router",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateRouter(
    @common.Param() params: RouterWhereUniqueInput,
    @common.Body() data: RouterUpdateInput
  ): Promise<Router | null> {
    try {
      return await this.service.updateRouter({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          isConnected: true,
          routerName: true,
          macAddress: true,
          signalStrength: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Router })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Router",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteRouter(
    @common.Param() params: RouterWhereUniqueInput
  ): Promise<Router | null> {
    try {
      return await this.service.deleteRouter({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          isConnected: true,
          routerName: true,
          macAddress: true,
          signalStrength: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/routers")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async GetRouters(
    @common.Body()
    body: string
  ): Promise<string[]> {
    return this.service.GetRouters(body);
  }

  @common.Post("/scan-routers")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async ScanRouters(
    @common.Body()
    body: string
  ): Promise<string> {
    return this.service.ScanRouters(body);
  }
}
