/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { WebSocketConnection } from "./WebSocketConnection";
import { WebSocketConnectionCountArgs } from "./WebSocketConnectionCountArgs";
import { WebSocketConnectionFindManyArgs } from "./WebSocketConnectionFindManyArgs";
import { WebSocketConnectionFindUniqueArgs } from "./WebSocketConnectionFindUniqueArgs";
import { CreateWebSocketConnectionArgs } from "./CreateWebSocketConnectionArgs";
import { UpdateWebSocketConnectionArgs } from "./UpdateWebSocketConnectionArgs";
import { DeleteWebSocketConnectionArgs } from "./DeleteWebSocketConnectionArgs";
import { WebSocketConnectionService } from "../webSocketConnection.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => WebSocketConnection)
export class WebSocketConnectionResolverBase {
  constructor(
    protected readonly service: WebSocketConnectionService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "WebSocketConnection",
    action: "read",
    possession: "any",
  })
  async _webSocketConnectionsMeta(
    @graphql.Args() args: WebSocketConnectionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [WebSocketConnection])
  @nestAccessControl.UseRoles({
    resource: "WebSocketConnection",
    action: "read",
    possession: "any",
  })
  async webSocketConnections(
    @graphql.Args() args: WebSocketConnectionFindManyArgs
  ): Promise<WebSocketConnection[]> {
    return this.service.webSocketConnections(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => WebSocketConnection, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "WebSocketConnection",
    action: "read",
    possession: "own",
  })
  async webSocketConnection(
    @graphql.Args() args: WebSocketConnectionFindUniqueArgs
  ): Promise<WebSocketConnection | null> {
    const result = await this.service.webSocketConnection(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => WebSocketConnection)
  @nestAccessControl.UseRoles({
    resource: "WebSocketConnection",
    action: "create",
    possession: "any",
  })
  async createWebSocketConnection(
    @graphql.Args() args: CreateWebSocketConnectionArgs
  ): Promise<WebSocketConnection> {
    return await this.service.createWebSocketConnection({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => WebSocketConnection)
  @nestAccessControl.UseRoles({
    resource: "WebSocketConnection",
    action: "update",
    possession: "any",
  })
  async updateWebSocketConnection(
    @graphql.Args() args: UpdateWebSocketConnectionArgs
  ): Promise<WebSocketConnection | null> {
    try {
      return await this.service.updateWebSocketConnection({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => WebSocketConnection)
  @nestAccessControl.UseRoles({
    resource: "WebSocketConnection",
    action: "delete",
    possession: "any",
  })
  async deleteWebSocketConnection(
    @graphql.Args() args: DeleteWebSocketConnectionArgs
  ): Promise<WebSocketConnection | null> {
    try {
      return await this.service.deleteWebSocketConnection(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Query(() => String)
  async GetWebSocketConnectionStatus(
    @graphql.Args()
    args: string
  ): Promise<string> {
    return this.service.GetWebSocketConnectionStatus(args);
  }

  @graphql.Mutation(() => String)
  async InitiateWebSocketConnection(
    @graphql.Args()
    args: string
  ): Promise<string> {
    return this.service.InitiateWebSocketConnection(args);
  }
}
